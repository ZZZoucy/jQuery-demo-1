{"version":3,"sources":["jquery.js"],"names":["window","$","jQuery","selectorOrArrayOrTemplate","elements","createElement","document","querySelectorAll","Array","string","container","innerHTML","trim","content","firstChild","api","Object","create","prototype","assign","oldApi","fn","constructor","get","index","appendTo","node","Element","each","el","appendChild","append","children","HTMLCollection","i","length","find","selector","array","elements2","from","concat","call","parent","indexOf","parentNode","push","print","console","log","addClass","className","element","classList","add","end"],"mappings":"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","file":"jquery.07d15279.map","sourceRoot":"../src","sourcesContent":["// window.$ = window.jQuery 是为了添加别名\nwindow.$ = window.jQuery = function (selectorOrArrayOrTemplate) {\n    let elements;\n    if (typeof selectorOrArrayOrTemplate === \"string\") {\n        if (selectorOrArrayOrTemplate[0] === \"<\") {\n            // 说明是标签\n            // 创建 div\n            elements = [createElement(selectorOrArrayOrTemplate)];\n        } else {\n            // 说明是选择器\n            // 查找 div\n            elements = document.querySelectorAll(selectorOrArrayOrTemplate);\n        }\n    } else if (selectorOrArrayOrTemplate instanceof Array) {\n        elements = selectorOrArrayOrTemplate;\n    }\n\n    function createElement(string) {\n        const container = document.createElement(\"template\");\n        container.innerHTML = string.trim();\n        return container.content.firstChild;\n    }\n    // api 可以操作 elements\n    const api = Object.create(jQuery.prototype);\n    // 创建一个对象，这个对象的 __proto__ 为jQuery.prototype\n    // 相当于写成 const api = {__proto__:jQuery.prototype}\n    Object.assign(api, {\n        elements: elements,\n        oldApi: selectorOrArrayOrTemplate.oldApi,\n    });\n    // Object.assign... 相当于写成下面的代码\n    // api.elements = elements\n    // api.oldApi = selectorOrArrayOrTemplate.oldApi\n    return api;\n};\n\njQuery.fn = jQuery.prototype = {\n    constructor: jQuery,\n    jQuery: true,\n    get(index) {\n        return this.elements[index];\n    },\n    appendTo(node) {\n        // appendTo() 把新增的元素放到另一个元素里\n        if (node instanceof Element) {\n            this.each((el) => node.appendChild(el));\n            // 遍历 elements，对每个 el 进行 node.appendChild 操作\n        } else if (node.jQuery === true) {\n            this.each((el) => node.get(0).appendChild(el));\n            // 遍历 elements，对每个 el 进行 node.get(0).appendChild(el))  操作\n        }\n    },\n    append(children) {\n        //在每个匹配元素里面的末尾处插入参数内容\n        if (children instanceof Element) {\n            this.get(0).appendChild(children);\n        } else if (children instanceof HTMLCollection) {\n            for (let i = 0; i < children.length; i++) {\n                this.get(0).appendChild(children[i]);\n            }\n        } else if (children.jQuery === true) {\n            children.each((node) => this.get(0).appendChild(node));\n        }\n    },\n    find(selector) {\n        let array = [];\n        for (let i = 0; i < this.elements.length; i++) {\n            const elements2 = Array.from(this.elements[i].querySelectorAll(selector));\n            array = array.concat(this.elements2);\n        }\n        array.oldApi = this; // 这里的 this 是 旧api\n        return jQuery(array);\n    },\n    each(fn) {\n        for (let i = 0; i < this.elements.length; i++) {\n            fn.call(null, this.elements[i], i);\n        }\n        return this;\n    },\n    parent() {\n        const array = [];\n        this.each((node) => {\n            if (array.indexOf(node.parentNode) === -1) {\n                array.push(node.parentNode);\n            }\n        });\n        return jQuery(array);\n    },\n    children() {\n        const array = [];\n        this.each((node) => {\n            array.push(...node.children);\n        });\n        return jQuery(array);\n    },\n    print() {\n        console.log(this.elements);\n    },\n    // 闭包：函数访问外部变量\n    addClass(className) {\n        for (let i = 0; i < this.elements.length; i++) {\n            const element = this.elements[i];\n            element.classList.add(className);\n        }\n        return this;\n    },\n    end() {\n        return this.oldApi; // 这里的 this 是 新api\n    },\n};\n"]}